(first '(1 2 3 4))

(first '((1 2) (3 4)))

(first '(((1 2) (3 4)) ((5 6) (7 8))))

(car '(1 2 3 4))

(car '((1 2) (3 4)))

(car '(((1 2) (3 4)) ((5 6) (7 8))))

(rest '((1 2) (3 4) 5))

(cdr '((1 2) (3 4) 5))

(cons '(1) '(2 3 4))

(list '(1) '(2 3 4) '(5 6 7))

(second '(1 2 3 4))

(first (rest '(1 2 3 4)))

(listp '(1 2 3 4))

(consp '(1 2 3 4))

(listp nil)

(consp nil)

(atom nil)

(null '())
(null nil)
(cons 1 2)
(cons 1 nil)
(cons '(1) 2)

(car '(1 2))
(cdr '(1 2))
(car '(1 . 2))
(cdr '(1 . 2))

(defun average (x y) (/ (+ x y) 2))
(average 4 10)
(list 6 7)
(cons 6 7)
(cons 5 (list 6 7))
(cons 5 '(list 6 7))
(list 3 'from 9 'gives (- 9 3))
(+ (length '(1 a 2 b)) (third '(1 a 2 b)))
(third '(1 2 3 4))
(list t t t t)
(cons 'a (list 'b 'c))
(list 1 2)
(cons 'a '(b c))
(list t 'a 'b nil)
(first '(list b c))
(first (list 'a 'b))
(cons 'a '('b 'c))
(cons 'a '(b c))
(defun kpl (x y z) (/ (- y x) z))
(kpl 1 10 3)
(defun addlength (x) (cons (length x) x))
(addlength '(a b c))
(defun scrabble (word) (list word 'is 'a 'word))
(scrabble 'hello)
(stooge 'moe 'curly 'larry)
(defun mystery (x) (list (second x) (first x)))
(mystery '(dancing bear))
(mystery '(dancing))
(if (oddp 1) 'odd 'even)
(if (oddp 2) 'odd 'even)
(if nil 'happy 'nothappy)
(if t 'happy 'nothappty)
(defun make-even (x) (if (oddp x) (+ x 1) x))
(make-even 3)
(make-even 4)
(defun longer (x y) (if (> (length x) (length y)) t))
(longer '(a b c) '(d e f g))
(longer '(a b c) '(d e f))
(longer '(a b c d) '(d e f))
(defun ordered (x y) (if (< x y) (list x y) (list y x)))
(ordered 3 4)
(ordered 4 3)
(ordered 3 3)
(defun constrain (x min max)
  (cond ((> x max) max)
        ((< x min) min)
        (t x)))
(constrain 5 3 7)
(constrain 2 3 7)
(constrain 8 3 7)
(defun eq1 (x)
  (cond ((and (> x 0) (oddp x)) (* x x))
        ((and (< x 0) (oddp x)) (* 2 x))
        (t (/ x 2))))
(eq1 3)
(eq1 -3)
(eq1 4)